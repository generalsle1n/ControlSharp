@page "/assets"
@attribute [StreamRendering]
@inject IHttpClientFactory ClientFactory

<PageTitle>Assets</PageTitle>

<h1>Assets</h1>

<p>This component demonstrates showing data.</p>

@if (AllAssets == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var forecast in AllAssets)
        {
            <tr>
                @* <td>@forecast.Date.ToShortDateString()</td> *@
                @* <td>@forecast.TemperatureC</td> *@
                @* <td>@forecast.TemperatureF</td> *@
                @* <td>@forecast.Summary</td> *@
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private List<Assets>? AllAssets;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        HttpClient Client = ClientFactory.CreateClient();
        Client.BaseAddress = new Uri("ControlSharp-Api");

        // HttpRequestMessage Request = new HttpRequestMessage()
        // {
        //     RequestUri = "/api/0.1/Asset"
        // };
        
        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] {"Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"};
        
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int) (TemperatureC / 0.5556);
    }

}